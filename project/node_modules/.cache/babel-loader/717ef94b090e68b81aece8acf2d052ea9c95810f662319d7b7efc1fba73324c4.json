{"ast":null,"code":"// actions.js\nexport const FETCH_POKEMON_LIST_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_POKEMON_LIST_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_POKEMON_LIST_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\nexport const FETCH_POKEMON_GROUPS_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_POKEMON_GROUPS_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_POKEMON_GROUPS_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\nconst updatePokemonList = list => {\n  return {\n    type: FETCH_POKEMON_LIST_SUCCESS,\n    payload: list\n  };\n};\nconst updatePokemon = data => {\n  return {\n    type: FETCH_POKEMON_GROUPS_SUCCESS,\n    payload: data\n  };\n};\nasync function getAllDataForPokemonList(list) {\n  let completed_list = [];\n  for (let e of list) {\n    const res = await fetch(e.url);\n    if (!res.ok) {\n      throw new Error('Errore nella richiesta');\n    } //single pokemon has url for fetching its main info (sort of mongo populate)\n    const pokemonData = await res.json();\n    completed_list.push(pokemonData);\n  }\n  return completed_list;\n}\nexport const fetchPokemonList = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_POKEMON_LIST_REQUEST\n    });\n    try {\n      const res = await fetch('https://pokeapi.co/api/v2/pokemon/');\n      if (!res.ok) {\n        throw new Error('Errore nella richiesta');\n      }\n      const list = await res.json();\n      const completed_list = await getAllDataForPokemonList(list.results || []);\n      dispatch(updatePokemonList(completed_list));\n    } catch (error) {\n      dispatch({\n        type: FETCH_POKEMON_LIST_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchPokemonTypes = types => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_POKEMON_GROUPS_REQUEST\n    });\n    try {\n      for (let t of types) {\n        const res = await fetch(t.type.url);\n        if (!res.ok) {\n          throw new Error('Errore nella richiesta');\n        }\n        const data = await res.json();\n      }\n      dispatch(updatePokemon(data));\n    } catch (error) {\n      dispatch({\n        type: FETCH_POKEMON_GROUPS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_POKEMON_LIST_REQUEST","FETCH_POKEMON_LIST_SUCCESS","FETCH_POKEMON_LIST_FAILURE","FETCH_POKEMON_GROUPS_REQUEST","FETCH_POKEMON_GROUPS_SUCCESS","FETCH_POKEMON_GROUPS_FAILURE","updatePokemonList","list","type","payload","updatePokemon","data","getAllDataForPokemonList","completed_list","e","res","fetch","url","ok","Error","pokemonData","json","push","fetchPokemonList","dispatch","results","error","message","fetchPokemonTypes","types","t"],"sources":["/Users/amedeofresia/Documents/Lavoro/React Test/PokeApp/poke-app/src/store/actions/pokemon.js"],"sourcesContent":["// actions.js\nexport const FETCH_POKEMON_LIST_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_POKEMON_LIST_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_POKEMON_LIST_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\n\nexport const FETCH_POKEMON_GROUPS_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_POKEMON_GROUPS_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_POKEMON_GROUPS_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\n\nconst updatePokemonList = (list) => {\n    return {\n        type: FETCH_POKEMON_LIST_SUCCESS,\n        payload: list\n    }\n}\n\nconst updatePokemon = (data) => {\n    return {\n        type: FETCH_POKEMON_GROUPS_SUCCESS,\n        payload: data\n    }\n}\n\nasync function getAllDataForPokemonList(list) {\n    let completed_list = [];\n    for(let e of list) {\n        const res = await fetch(e.url); \n        if (!res.ok) {\n            throw new Error('Errore nella richiesta');\n        }  //single pokemon has url for fetching its main info (sort of mongo populate)\n        const pokemonData = await res.json()\n        completed_list.push(pokemonData);\n    }\n\n    return completed_list;\n}\n\nexport const fetchPokemonList = () => {\n    return async dispatch => {\n        dispatch({ type: FETCH_POKEMON_LIST_REQUEST });\n        try {\n            const res = await fetch('https://pokeapi.co/api/v2/pokemon/');\n            if (!res.ok) {\n                throw new Error('Errore nella richiesta');\n            }    \n            const list = await res.json();\n            const completed_list = await getAllDataForPokemonList(list.results || [])\n            dispatch(updatePokemonList(completed_list));\n        }     \n        catch (error) {\n            dispatch({ type: FETCH_POKEMON_LIST_FAILURE, payload: error.message });\n        }    \n    }    \n};    \n\n\nexport const fetchPokemonTypes = (types) => {\n    return async dispatch => {\n        dispatch({ type: FETCH_POKEMON_GROUPS_REQUEST });\n        try {\n            for(let t of types) {\n                const res = await fetch(t.type.url);\n                if (!res.ok) {\n                    throw new Error('Errore nella richiesta');\n                }    \n                const data = await res.json();\n            }\n            \n            dispatch(updatePokemon(data));\n        }     \n        catch (error) {\n            dispatch({ type: FETCH_POKEMON_GROUPS_FAILURE, payload: error.message });\n        }    \n    }  \n}\n\n\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AAEtE,OAAO,MAAMC,4BAA4B,GAAG,4BAA4B;AACxE,OAAO,MAAMC,4BAA4B,GAAG,4BAA4B;AACxE,OAAO,MAAMC,4BAA4B,GAAG,4BAA4B;AAExE,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAChC,OAAO;IACHC,IAAI,EAAEP,0BAA0B;IAChCQ,OAAO,EAAEF;EACb,CAAC;AACL,CAAC;AAED,MAAMG,aAAa,GAAIC,IAAI,IAAK;EAC5B,OAAO;IACHH,IAAI,EAAEJ,4BAA4B;IAClCK,OAAO,EAAEE;EACb,CAAC;AACL,CAAC;AAED,eAAeC,wBAAwBA,CAACL,IAAI,EAAE;EAC1C,IAAIM,cAAc,GAAG,EAAE;EACvB,KAAI,IAAIC,CAAC,IAAIP,IAAI,EAAE;IACf,MAAMQ,GAAG,GAAG,MAAMC,KAAK,CAACF,CAAC,CAACG,GAAG,CAAC;IAC9B,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC7C,CAAC,CAAE;IACH,MAAMC,WAAW,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;IACpCR,cAAc,CAACS,IAAI,CAACF,WAAW,CAAC;EACpC;EAEA,OAAOP,cAAc;AACzB;AAEA,OAAO,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;EAClC,OAAO,MAAMC,QAAQ,IAAI;IACrBA,QAAQ,CAAC;MAAEhB,IAAI,EAAER;IAA2B,CAAC,CAAC;IAC9C,IAAI;MACA,MAAMe,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAC7D,IAAI,CAACD,GAAG,CAACG,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC7C;MACA,MAAMZ,IAAI,GAAG,MAAMQ,GAAG,CAACM,IAAI,CAAC,CAAC;MAC7B,MAAMR,cAAc,GAAG,MAAMD,wBAAwB,CAACL,IAAI,CAACkB,OAAO,IAAI,EAAE,CAAC;MACzED,QAAQ,CAAClB,iBAAiB,CAACO,cAAc,CAAC,CAAC;IAC/C,CAAC,CACD,OAAOa,KAAK,EAAE;MACVF,QAAQ,CAAC;QAAEhB,IAAI,EAAEN,0BAA0B;QAAEO,OAAO,EAAEiB,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC1E;EACJ,CAAC;AACL,CAAC;AAGD,OAAO,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;EACxC,OAAO,MAAML,QAAQ,IAAI;IACrBA,QAAQ,CAAC;MAAEhB,IAAI,EAAEL;IAA6B,CAAC,CAAC;IAChD,IAAI;MACA,KAAI,IAAI2B,CAAC,IAAID,KAAK,EAAE;QAChB,MAAMd,GAAG,GAAG,MAAMC,KAAK,CAACc,CAAC,CAACtB,IAAI,CAACS,GAAG,CAAC;QACnC,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE;UACT,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;QAC7C;QACA,MAAMR,IAAI,GAAG,MAAMI,GAAG,CAACM,IAAI,CAAC,CAAC;MACjC;MAEAG,QAAQ,CAACd,aAAa,CAACC,IAAI,CAAC,CAAC;IACjC,CAAC,CACD,OAAOe,KAAK,EAAE;MACVF,QAAQ,CAAC;QAAEhB,IAAI,EAAEH,4BAA4B;QAAEI,OAAO,EAAEiB,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC5E;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}