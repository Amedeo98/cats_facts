{"ast":null,"code":"export const FETCH_CAT_FACT_LIST_REQUEST = 'FETCH_CAT_FACT_LIST_REQUEST';\nexport const FETCH_CAT_FACT_LIST_SUCCESS = 'FETCH_CAT_FACT_LIST_SUCCESS';\nexport const FETCH_CAT_FACT_LIST_FAILURE = 'FETCH_CAT_FACT_LIST_FAILURE';\nexport const FETCH_CAT_FACT_REQUEST = 'FETCH_CAT_FACT_REQUEST';\nexport const FETCH_CAT_FACT_SUCCESS = 'FETCH_CAT_FACT_SUCCESS';\nexport const FETCH_CAT_FACT_FAILURE = 'FETCH_CAT_FACT_FAILURE';\nconst updateCatFactsList = list => {\n  return {\n    type: FETCH_CAT_FACT_LIST_SUCCESS,\n    payload: list\n  };\n};\nexport const fetchCatFactsList = current_page => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_CAT_FACT_LIST_REQUEST\n    });\n    try {\n      let res;\n      if (current_page) {\n        current_page++;\n        res = await fetch(`https://catfact.ninja/facts?page=${current_page}`);\n      } else {\n        res = await fetch('https://catfact.ninja/facts');\n      }\n      if (!res.ok) {\n        throw new Error('Error in request');\n      }\n      const list = await res.json();\n      console.log(list);\n      dispatch(updateCatFactsList(list));\n    } catch (error) {\n      dispatch({\n        type: FETCH_CAT_FACT_LIST_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nconst updateCatFact = catFact => {\n  return {\n    type: FETCH_CAT_FACT_SUCCESS,\n    payload: catFact\n  };\n};\nexport const fetchCatFact = index => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_CAT_FACT_REQUEST\n    });\n    try {\n      dispatch(updateCatFact(index));\n    } catch (error) {\n      dispatch({\n        type: FETCH_CAT_FACT_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_CAT_FACT_LIST_REQUEST","FETCH_CAT_FACT_LIST_SUCCESS","FETCH_CAT_FACT_LIST_FAILURE","FETCH_CAT_FACT_REQUEST","FETCH_CAT_FACT_SUCCESS","FETCH_CAT_FACT_FAILURE","updateCatFactsList","list","type","payload","fetchCatFactsList","current_page","dispatch","res","fetch","ok","Error","json","console","log","error","message","updateCatFact","catFact","fetchCatFact","index"],"sources":["/Users/amedeofresia/Documents/Lavoro/React Test/CatsFacts/cats-facts/src/store/actions/cat_fact.js"],"sourcesContent":["export const FETCH_CAT_FACT_LIST_REQUEST = 'FETCH_CAT_FACT_LIST_REQUEST';\nexport const FETCH_CAT_FACT_LIST_SUCCESS = 'FETCH_CAT_FACT_LIST_SUCCESS';\nexport const FETCH_CAT_FACT_LIST_FAILURE = 'FETCH_CAT_FACT_LIST_FAILURE';\nexport const FETCH_CAT_FACT_REQUEST = 'FETCH_CAT_FACT_REQUEST';\nexport const FETCH_CAT_FACT_SUCCESS = 'FETCH_CAT_FACT_SUCCESS';\nexport const FETCH_CAT_FACT_FAILURE = 'FETCH_CAT_FACT_FAILURE';\n\n\nconst updateCatFactsList = (list) => {\n    return {\n        type: FETCH_CAT_FACT_LIST_SUCCESS,\n        payload: list\n    }\n}\n\n\nexport const fetchCatFactsList = (current_page) => {\n    return async dispatch => {\n        dispatch({ type: FETCH_CAT_FACT_LIST_REQUEST });\n        try {\n            let res;\n            if(current_page){\n                current_page++;\n                res = await fetch(`https://catfact.ninja/facts?page=${current_page}`);\n            }\n            else {\n                res = await fetch('https://catfact.ninja/facts');\n            }\n            if (!res.ok) {\n                throw new Error('Error in request');\n            }\n            const list = await res.json();\n            console.log(list);\n            dispatch(updateCatFactsList(list));\n        }\n        catch (error) {\n            dispatch({ type: FETCH_CAT_FACT_LIST_FAILURE, payload: error.message });\n        }\n    }\n};\n\n\nconst updateCatFact = (catFact) => {\n    return {\n      type: FETCH_CAT_FACT_SUCCESS,\n      payload: catFact,\n    };\n  };\n  \n  export const fetchCatFact = (index) => {\n    return async (dispatch) => {\n      dispatch({ type: FETCH_CAT_FACT_REQUEST });\n      try {\n        dispatch(updateCatFact(index));\n      } catch (error) {\n        dispatch({ type: FETCH_CAT_FACT_FAILURE, payload: error.message });\n      }\n    };\n  };\n  \n\n"],"mappings":"AAAA,OAAO,MAAMA,2BAA2B,GAAG,6BAA6B;AACxE,OAAO,MAAMC,2BAA2B,GAAG,6BAA6B;AACxE,OAAO,MAAMC,2BAA2B,GAAG,6BAA6B;AACxE,OAAO,MAAMC,sBAAsB,GAAG,wBAAwB;AAC9D,OAAO,MAAMC,sBAAsB,GAAG,wBAAwB;AAC9D,OAAO,MAAMC,sBAAsB,GAAG,wBAAwB;AAG9D,MAAMC,kBAAkB,GAAIC,IAAI,IAAK;EACjC,OAAO;IACHC,IAAI,EAAEP,2BAA2B;IACjCQ,OAAO,EAAEF;EACb,CAAC;AACL,CAAC;AAGD,OAAO,MAAMG,iBAAiB,GAAIC,YAAY,IAAK;EAC/C,OAAO,MAAMC,QAAQ,IAAI;IACrBA,QAAQ,CAAC;MAAEJ,IAAI,EAAER;IAA4B,CAAC,CAAC;IAC/C,IAAI;MACA,IAAIa,GAAG;MACP,IAAGF,YAAY,EAAC;QACZA,YAAY,EAAE;QACdE,GAAG,GAAG,MAAMC,KAAK,CAAE,oCAAmCH,YAAa,EAAC,CAAC;MACzE,CAAC,MACI;QACDE,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;MACpD;MACA,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MACvC;MACA,MAAMT,IAAI,GAAG,MAAMM,GAAG,CAACI,IAAI,CAAC,CAAC;MAC7BC,OAAO,CAACC,GAAG,CAACZ,IAAI,CAAC;MACjBK,QAAQ,CAACN,kBAAkB,CAACC,IAAI,CAAC,CAAC;IACtC,CAAC,CACD,OAAOa,KAAK,EAAE;MACVR,QAAQ,CAAC;QAAEJ,IAAI,EAAEN,2BAA2B;QAAEO,OAAO,EAAEW,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC3E;EACJ,CAAC;AACL,CAAC;AAGD,MAAMC,aAAa,GAAIC,OAAO,IAAK;EAC/B,OAAO;IACLf,IAAI,EAAEJ,sBAAsB;IAC5BK,OAAO,EAAEc;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACrC,OAAO,MAAOb,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEJ,IAAI,EAAEL;IAAuB,CAAC,CAAC;IAC1C,IAAI;MACFS,QAAQ,CAACU,aAAa,CAACG,KAAK,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdR,QAAQ,CAAC;QAAEJ,IAAI,EAAEH,sBAAsB;QAAEI,OAAO,EAAEW,KAAK,CAACC;MAAQ,CAAC,CAAC;IACpE;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}