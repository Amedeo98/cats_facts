{"ast":null,"code":"import { createStore } from 'redux';\nfunction counterReducer(state = {\n  value: 0\n}, action) {\n  switch (action.type) {\n    case 'counter/incremented':\n      return {\n        value: state.value + 1\n      };\n    case 'counter/decremented':\n      return {\n        value: state.value - 1\n      };\n    default:\n      return state;\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nconst store = createStore(counterReducer);\n\n// You can use subscribe() to update the UI in response to state changes.\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n// There may be additional use cases where it's helpful to subscribe as well.\n\nstore.subscribe(() => console.log(store.getState()));\n\n// The only way to mutate the internal state is to dispatch an action.\n// The actions can be serialized, logged or stored and later replayed.\nstore.dispatch({\n  type: 'counter/incremented'\n});\n// {value: 1}\nstore.dispatch({\n  type: 'counter/incremented'\n});\n// {value: 2}\nstore.dispatch({\n  type: 'counter/decremented'\n});\n// {value: 1}\n\nexport default store;","map":{"version":3,"names":["createStore","counterReducer","state","value","action","type","store","subscribe","console","log","getState","dispatch"],"sources":["/Users/amedeofresia/Documents/Lavoro/React Test/CatsFacts/cats-facts/src/store/store.js"],"sourcesContent":["import { createStore } from 'redux'\n\nfunction counterReducer(state = { value: 0 }, action) {\n    switch (action.type) {\n      case 'counter/incremented':\n        return { value: state.value + 1 }\n      case 'counter/decremented':\n        return { value: state.value - 1 }\n      default:\n        return state\n    }\n  }\n  \n  // Create a Redux store holding the state of your app.\n  // Its API is { subscribe, dispatch, getState }.\n  const store = createStore(counterReducer)\n  \n  // You can use subscribe() to update the UI in response to state changes.\n  // Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n  // There may be additional use cases where it's helpful to subscribe as well.\n  \n  store.subscribe(() => console.log(store.getState()))\n  \n  // The only way to mutate the internal state is to dispatch an action.\n  // The actions can be serialized, logged or stored and later replayed.\n  store.dispatch({ type: 'counter/incremented' })\n  // {value: 1}\n  store.dispatch({ type: 'counter/incremented' })\n  // {value: 2}\n  store.dispatch({ type: 'counter/decremented' })\n  // {value: 1}\n\n  export default store;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,SAASC,cAAcA,CAACC,KAAK,GAAG;EAAEC,KAAK,EAAE;AAAE,CAAC,EAAEC,MAAM,EAAE;EAClD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,qBAAqB;MACxB,OAAO;QAAEF,KAAK,EAAED,KAAK,CAACC,KAAK,GAAG;MAAE,CAAC;IACnC,KAAK,qBAAqB;MACxB,OAAO;QAAEA,KAAK,EAAED,KAAK,CAACC,KAAK,GAAG;MAAE,CAAC;IACnC;MACE,OAAOD,KAAK;EAChB;AACF;;AAEA;AACA;AACA,MAAMI,KAAK,GAAGN,WAAW,CAACC,cAAc,CAAC;;AAEzC;AACA;AACA;;AAEAK,KAAK,CAACC,SAAS,CAAC,MAAMC,OAAO,CAACC,GAAG,CAACH,KAAK,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAEpD;AACA;AACAJ,KAAK,CAACK,QAAQ,CAAC;EAAEN,IAAI,EAAE;AAAsB,CAAC,CAAC;AAC/C;AACAC,KAAK,CAACK,QAAQ,CAAC;EAAEN,IAAI,EAAE;AAAsB,CAAC,CAAC;AAC/C;AACAC,KAAK,CAACK,QAAQ,CAAC;EAAEN,IAAI,EAAE;AAAsB,CAAC,CAAC;AAC/C;;AAEA,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}