{"ast":null,"code":"export const FETCH_POKEMON_LIST_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_POKEMON_LIST_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_POKEMON_LIST_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\nexport const FETCH_EVOL_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_EVOL_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_EVOL_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\nconst updatePokemonList = list => {\n  return {\n    type: FETCH_POKEMON_LIST_SUCCESS,\n    payload: list\n  };\n};\nasync function getAllDataForPokemonList(list) {\n  let completed_list = [];\n  for (let e of list) {\n    const res = await fetch(e.url);\n    if (!res.ok) {\n      throw new Error('Error in request');\n    } //single pokemon has url for fetching its main info (sort of mongo populate)\n    const pokemonData = await res.json();\n    completed_list.push(pokemonData);\n  }\n  return completed_list;\n}\nexport const fetchPokemonList = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_POKEMON_LIST_REQUEST\n    });\n    try {\n      const res = await fetch('https://pokeapi.co/api/v2/pokemon/');\n      if (!res.ok) {\n        throw new Error('Error in request');\n      }\n      const list = await res.json();\n      const completed_list = await getAllDataForPokemonList(list.results || []);\n      dispatch(updatePokemonList(completed_list));\n    } catch (error) {\n      dispatch({\n        type: FETCH_POKEMON_LIST_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nfunction getEvolution(chain, evol) {\n  if (evol && evol.species && evol.species.url) {\n    chain.push(evol.species.url);\n  }\n  if (evol && evol.evolves_to) {\n    evol.evolves_to.forEach(e => {\n      chain = getEvolution(chain, e.chain);\n    });\n  }\n  return chain;\n}\nexport const fetchEvolutionChain = id => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_EVOL_REQUEST\n    });\n    try {\n      var _specie$evolution_cha;\n      const res = await fetch('https://pokeapi.co/api/v2/pokemon-species/' + id);\n      if (!res.ok) {\n        throw new Error('Error in request');\n      }\n      const specie = await res.json();\n      const evol = await fetch(specie === null || specie === void 0 ? void 0 : (_specie$evolution_cha = specie.evolution_chain) === null || _specie$evolution_cha === void 0 ? void 0 : _specie$evolution_cha.url);\n      if (!evol.ok) {\n        throw new Error('Error in request');\n      }\n      const evolObj = await evol.json();\n      let evol_chain = [];\n      evol_chain = getEvolution(evol_chain, evolObj.chain);\n    } catch (error) {\n      dispatch({\n        type: FETCH_EVOL_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_POKEMON_LIST_REQUEST","FETCH_POKEMON_LIST_SUCCESS","FETCH_POKEMON_LIST_FAILURE","FETCH_EVOL_REQUEST","FETCH_EVOL_SUCCESS","FETCH_EVOL_FAILURE","updatePokemonList","list","type","payload","getAllDataForPokemonList","completed_list","e","res","fetch","url","ok","Error","pokemonData","json","push","fetchPokemonList","dispatch","results","error","message","getEvolution","chain","evol","species","evolves_to","forEach","fetchEvolutionChain","id","_specie$evolution_cha","specie","evolution_chain","evolObj","evol_chain"],"sources":["/Users/amedeofresia/Documents/Lavoro/React Test/PokeApp/poke-app/src/store/actions/pokemon.js"],"sourcesContent":["export const FETCH_POKEMON_LIST_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_POKEMON_LIST_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_POKEMON_LIST_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\n\nexport const FETCH_EVOL_REQUEST = 'FETCH_POKEMON_LIST_REQUEST';\nexport const FETCH_EVOL_SUCCESS = 'FETCH_POKEMON_LIST_SUCCESS';\nexport const FETCH_EVOL_FAILURE = 'FETCH_POKEMON_LIST_FAILURE';\n\nconst updatePokemonList = (list) => {\n    return {\n        type: FETCH_POKEMON_LIST_SUCCESS,\n        payload: list\n    }\n}\n\nasync function getAllDataForPokemonList(list) {\n    let completed_list = [];\n    for(let e of list) {\n        const res = await fetch(e.url); \n        if (!res.ok) {\n            throw new Error('Error in request');\n        }  //single pokemon has url for fetching its main info (sort of mongo populate)\n        const pokemonData = await res.json()\n        completed_list.push(pokemonData);\n    }\n\n    return completed_list;\n}\n\nexport const fetchPokemonList = () => {\n    return async dispatch => {\n        dispatch({ type: FETCH_POKEMON_LIST_REQUEST });\n        try {\n            const res = await fetch('https://pokeapi.co/api/v2/pokemon/');\n            if (!res.ok) {\n                throw new Error('Error in request');\n            }    \n            const list = await res.json();\n            const completed_list = await getAllDataForPokemonList(list.results || [])\n            dispatch(updatePokemonList(completed_list));\n        }     \n        catch (error) {\n            dispatch({ type: FETCH_POKEMON_LIST_FAILURE, payload: error.message });\n        }    \n    }    \n}; \n\nfunction getEvolution(chain, evol) {\n    if(evol && evol.species && evol.species.url){\n        chain.push(evol.species.url)\n    }\n    if(evol && evol.evolves_to){\n        evol.evolves_to.forEach(e => {\n            chain = getEvolution(chain, e.chain)\n        })\n    }\n    return chain;\n}\n\n\nexport const fetchEvolutionChain = (id) => {\n    return async dispatch => {\n        dispatch({ type: FETCH_EVOL_REQUEST });\n        try {\n            const res = await fetch('https://pokeapi.co/api/v2/pokemon-species/'+id);\n            if (!res.ok) {\n                throw new Error('Error in request');\n            }    \n            const specie = await res.json();\n            const evol = await fetch(specie?.evolution_chain?.url)\n            if (!evol.ok) {\n                throw new Error('Error in request');\n            }  \n            const evolObj = await evol.json();\n            let evol_chain = [];\n            evol_chain = getEvolution(evol_chain, evolObj.chain)\n        \n        }     \n        catch (error) {\n            dispatch({ type: FETCH_EVOL_FAILURE, payload: error.message });\n        }    \n    }     \n}\n\n\n\n\n"],"mappings":"AAAA,OAAO,MAAMA,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AAEtE,OAAO,MAAMC,kBAAkB,GAAG,4BAA4B;AAC9D,OAAO,MAAMC,kBAAkB,GAAG,4BAA4B;AAC9D,OAAO,MAAMC,kBAAkB,GAAG,4BAA4B;AAE9D,MAAMC,iBAAiB,GAAIC,IAAI,IAAK;EAChC,OAAO;IACHC,IAAI,EAAEP,0BAA0B;IAChCQ,OAAO,EAAEF;EACb,CAAC;AACL,CAAC;AAED,eAAeG,wBAAwBA,CAACH,IAAI,EAAE;EAC1C,IAAII,cAAc,GAAG,EAAE;EACvB,KAAI,IAAIC,CAAC,IAAIL,IAAI,EAAE;IACf,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAACF,CAAC,CAACG,GAAG,CAAC;IAC9B,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IACvC,CAAC,CAAE;IACH,MAAMC,WAAW,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;IACpCR,cAAc,CAACS,IAAI,CAACF,WAAW,CAAC;EACpC;EAEA,OAAOP,cAAc;AACzB;AAEA,OAAO,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;EAClC,OAAO,MAAMC,QAAQ,IAAI;IACrBA,QAAQ,CAAC;MAAEd,IAAI,EAAER;IAA2B,CAAC,CAAC;IAC9C,IAAI;MACA,MAAMa,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;MAC7D,IAAI,CAACD,GAAG,CAACG,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MACvC;MACA,MAAMV,IAAI,GAAG,MAAMM,GAAG,CAACM,IAAI,CAAC,CAAC;MAC7B,MAAMR,cAAc,GAAG,MAAMD,wBAAwB,CAACH,IAAI,CAACgB,OAAO,IAAI,EAAE,CAAC;MACzED,QAAQ,CAAChB,iBAAiB,CAACK,cAAc,CAAC,CAAC;IAC/C,CAAC,CACD,OAAOa,KAAK,EAAE;MACVF,QAAQ,CAAC;QAAEd,IAAI,EAAEN,0BAA0B;QAAEO,OAAO,EAAEe,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC1E;EACJ,CAAC;AACL,CAAC;AAED,SAASC,YAAYA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC/B,IAAGA,IAAI,IAAIA,IAAI,CAACC,OAAO,IAAID,IAAI,CAACC,OAAO,CAACd,GAAG,EAAC;IACxCY,KAAK,CAACP,IAAI,CAACQ,IAAI,CAACC,OAAO,CAACd,GAAG,CAAC;EAChC;EACA,IAAGa,IAAI,IAAIA,IAAI,CAACE,UAAU,EAAC;IACvBF,IAAI,CAACE,UAAU,CAACC,OAAO,CAACnB,CAAC,IAAI;MACzBe,KAAK,GAAGD,YAAY,CAACC,KAAK,EAAEf,CAAC,CAACe,KAAK,CAAC;IACxC,CAAC,CAAC;EACN;EACA,OAAOA,KAAK;AAChB;AAGA,OAAO,MAAMK,mBAAmB,GAAIC,EAAE,IAAK;EACvC,OAAO,MAAMX,QAAQ,IAAI;IACrBA,QAAQ,CAAC;MAAEd,IAAI,EAAEL;IAAmB,CAAC,CAAC;IACtC,IAAI;MAAA,IAAA+B,qBAAA;MACA,MAAMrB,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAA4C,GAACmB,EAAE,CAAC;MACxE,IAAI,CAACpB,GAAG,CAACG,EAAE,EAAE;QACT,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MACvC;MACA,MAAMkB,MAAM,GAAG,MAAMtB,GAAG,CAACM,IAAI,CAAC,CAAC;MAC/B,MAAMS,IAAI,GAAG,MAAMd,KAAK,CAACqB,MAAM,aAANA,MAAM,wBAAAD,qBAAA,GAANC,MAAM,CAAEC,eAAe,cAAAF,qBAAA,uBAAvBA,qBAAA,CAAyBnB,GAAG,CAAC;MACtD,IAAI,CAACa,IAAI,CAACZ,EAAE,EAAE;QACV,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MACvC;MACA,MAAMoB,OAAO,GAAG,MAAMT,IAAI,CAACT,IAAI,CAAC,CAAC;MACjC,IAAImB,UAAU,GAAG,EAAE;MACnBA,UAAU,GAAGZ,YAAY,CAACY,UAAU,EAAED,OAAO,CAACV,KAAK,CAAC;IAExD,CAAC,CACD,OAAOH,KAAK,EAAE;MACVF,QAAQ,CAAC;QAAEd,IAAI,EAAEH,kBAAkB;QAAEI,OAAO,EAAEe,KAAK,CAACC;MAAQ,CAAC,CAAC;IAClE;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}